<?php
/**
 * Specify the default properties of votesmart_webform component
 *
 * @return An array defining the default structure of a component.
 */
function _webform_defaults_votesmart() {
  return array(
    'name' => '',
    'form_key' => NULL,
    'pid' => 0,
    'weight' => 0,
    'zip' => NULL,
    'extra' => array(
      'width' => '',
      'attributes' => array(),
      'name_format' => '%last, %first',
      'hide_zip' => FALSE
    )
  );
}

function _votesmart_webform_format_name($candidate,$format = '%title %last, %first')
{
  return t($format,array(
    '%title' => $candidate['title'],
    '%first' => $candidate['firstName'],
    '%last' =>  $candidate['lastName'],
    '%middle' => $candidate['middleName'],
    '%nick' => $candidate['nickName']
  ));
}

/**
 * Generate the form for editing votesmart_webform component
 * @param $component
 *   A Webform component array.
 * @return
 *   An array of form items to be displayed on the edit component page
 */
function _webform_edit_votesmart($component) {
  $form = array('extra' => array());

  $form['extra']['zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Specify Default Zip'),
    '#weight' => 0,
    '#default_value' => $component['extra']['zip'],
    '#element_validate' => array('_webform_edit_votesmart_default_zip_validate'),
  );

  $form['extra']['hide_zip'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide Zip'),
    '#weight'  => 0,
    '#default_value' => $component['extra']['hide_zip']
  );

  $form['extra']['name_format'] = array(
    '#type' => 'textfield',
    '#title' => t('Candidate Name Format'),
    '#weight' => 0,
    '#description' => t('valid tokens include: %title %first %middle %last %nick'),
    '#default_value' => $component['extra']['name_format'] ? $component['extra']['name_format'] : '%title %last, %first');

  $form['extra']['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => $component['extra']['width'],
    '#description' => t('Width of the textfield.') .' '. t('Leaving blank will use the default size.'),
    '#size' => 5,
    '#maxlength' => 10,
  );

  return $form;
}

/**
 * Validate the Default Zip Code
 * @param $zip_element The zip form element.
 * @param $form_state The full form state for the webform.
 */
function _webform_edit_votesmart_default_zip_validate($zip_element, &$form_state)
{
  $zip = $zip_element['#value'];//alias
  if( empty($zip) ) return;

  if( !votesmart_webform_is_zip($zip) )
  {
    form_error($zip_element,t('!value is not a valid zip code.',array('!value'=>$zip)));
  }
}

/**
 * Validate the Zip Code BLANK NOT ALLOWED
 * @param $zip_element The zip form element.
 * @param $form_state The full form state for the webform.
 */
function _webform_edit_votesmart_zip_validate($zip_element, &$form_state)
{
  $zip = $zip_element['#value'];//alias
  if( empty($zip) )
    form_error($zip_element,t('zip can not be blank.',array('!value'=>$zip)));

  if( !votesmart_webform_is_zip($zip) )
  {
    form_error($zip_element,t('!value is not a valid zip code.',array('!value'=>$zip)));
  }
}


/**
 * Render a Webform component to be part of a form.
 *
 * @param $component
 *   A Webform component array.
 * @param $value
 *   If editing an existing submission or resuming a draft, this will contain
 *   an array of values to be shown instead of the default in the component
 *   configuration. This value will always be an array, keyed numerically for
 *   each value saved in this field.
 */
function _webform_render_votesmart($component, $value = NULL) {


  if ($value[0]) {
    $zip_value = $value[0];
  }
  else {
    $zip_value = _webform_filter_values($component['zip']);
  }

  $dom_id = 'webform-component-'.$component['form_key'];
  $form = array(
    '#prefix' => '<div id="'.$dom_id.'" class="webform-component-votesmart">',
    'votesmart' => array(),
    '#suffix' => '</div><!--/#'.$dom_id.' .webform-component-votesmart-->'
  );

  $form['votesmart']['markup'] = array('#type'=>'markup','#value'=>print_r($value,1).print_r($component,1));

  $form['votesmart']['zip'] = array(
    '#type' => $component['extra']['hide_zip'] ? 'hidden' : 'textfield',
    '#title' => t('Zip'),
    '#required' => TRUE,
    '#weight' => $component['weight'],
    '#default_value' => $component['zip'],
    '#description'   => _webform_filter_descriptions($component['extra']['description']),
    '#element_validate' => array('_webform_edit_votesmart_zip_validate'),
    '#ahah' => array(
      'event' => 'change',
      'wrapper' => $dom_id,
      'path' => 'votesmart_webform/ahah/zip_changed',
      'progress'=>array('type'=> 'throbber')

    )
  );


  if( !isset($form['votesmart']['zip']['#default_value'])
      && !empty($component['extra']['zip'])
  )
  {
    $form['votesmart']['zip']['#default_value'] = $component['extra']['zip'];
  }


  $zip = $form['votesmart']['zip']['#default_value'];//alias

  $form['votesmart']['candidates'] = votesmart_webform_candidate_form_elements($zip,$component);
  $form['votesmart']['candidates']['#weight'] = $component['weight']+1;

  return $form;
}

function votesmart_webform_candidate_form_elements($zip,$component)
{
  if( !votesmart_webform_is_zip($zip) ) return array();

  $candidates = votesmart_webform_get_candidates_by_zip($zip);
  $candidate_elements = array();
  
  $cand_names = array();
  foreach($candidates as $id => $c )
    $cand_names[$id] = _votesmart_webform_format_name($c,$component['extra']['name_format']);

  asort($cand_names);

  foreach($cand_names as $cand_id => $cand_name )
  {
    $element = array(
      '#type' => 'checkbox',
      '#title' => $cand_name,
    );

    if( !isset($candidates[$cand_id]['Email']) )
    {
      $element['#disabled'] = true;
      $element['#description'] = t('No email found for !candidate.',array('!candidate'=>$cand_name));
      if( isset($candidates[$cand_id]['Webmail']) || isset($candidate[$cand_id]['Website']) )
      {
        if( isset($candidates[$cand_id]['Webmail']) )
        {
          $website = $candidates[$cand_id]['Webmail'];
        }
        else
          $website = $candidates[$cand_id]['Website'];

        $element['#description'] = t('No email found for !candidate, but you can try contacting them at <a target="_blank" rel="nofollow" href="!website">their website</a>.',array(
          '!candidate'=>$cand_name,
          '!website' => $website
        ));

      }
    }

    $candidate_elements[$cand_id].'>'] = $element;
  }
  
  return $candidate_elements;
}

/**
 * Display the result of a submission for a component.
 * 
 * The output of this function will be displayed under the "Results" tab then
 * "Submissions". This should output the saved data in some reasonable manner.
 *
 * @param $component
 *   A Webform component array.
 * @param $value
 *   An array of information containing the submission result, directly
 *   correlating to the webform_submitted_data database table schema.
 * @param $format
 *   Either 'html' or 'text'. Defines the format that the content should be
 *   returned as. Make sure that returned content is run through check_plain()
 *   or other filtering functions when returning HTML.
 * @return
 *   A renderable element containing at the very least these properties:
 *    - #title
 *    - #weight
 *    - #component
 *    - #format
 *    - #value
 *   Webform also uses #theme_wrappers to output the end result to the user,
 *   which will properly format the label and content for use within an e-mail
 *   (such as wrapping the text) or as HTML (ensuring consistent output).
 */
function _webform_display_votesmart($component, $value, $format = 'html') {
  return array(
    '#weight' => $component['weight'],
    '#theme' => 'markup',
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#post_render' => array('webform_element_wrapper'),
    '#component' => $component,
    '#format' => $format,
    '#value' => 'Submitted Data Goes Here',
  );
}

/**
 * Implementation of _webform_submit_component().
 */
function _webform_submit_votesmart($component, &$value)
{
  return serialize($value);
}


/**
 * Module specific instance of hook_help().
 *
 * This allows each Webform component to add information into hook_help().
 */
function _webform_help_votesmart($section) {
  switch ($section) {
    case 'admin/settings/webform#votesmart_webform_description':
      return t('Allows for representative lookup by zip code.');
  }
}

function votesmart_webform_ahah_zip_changed()
{

  // Build the new form.
  $form_state = array('submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  // Add the new element to the stored form. Without adding the element to the
  // form, Drupal is not aware of this new elements existence and will not
  // process it. We retreive the cached form, add the element, and resave.
  if (!$form = form_get_cache($form_build_id, $form_state)) {
    exit();
  }

  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  //process submit handlers
  //whatever is worth keeping is put in $form_state
  drupal_process_form($form_id,$form,$form_state);

  //rebuilds form, $_POST is cleared
  $form = drupal_rebuild_form($form_id, $form_state,$args, $form_build_id);

  // Render the new output.
  $output = drupal_render($form);

  drupal_json(array('status' => TRUE, 'data' => $output));
}
