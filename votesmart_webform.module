<?php
// $Id$

/**
 * Implementation of hook_menu().
 */
function votesmart_webform_menu() {
  $items = array();

  // Admin Settings.
  $items['admin/settings/votesmart_webform'] = array(
    'title' => 'Vote smart webform',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('votesmart_webform_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Configuration for Vote Smart webform.',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['votesmart_webform/ahah/get_candidates'] = array(
    'title' => 'AHAH callback for vote smart webform',
    'page callback' => 'votesmart_webform_ahah_get_candidates',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'votesmart_webform.webform.inc'
  );

  return $items;
}

/**
 * Implementation of hook_init().
 */
function votesmart_webform_init() {
  $path = drupal_get_path('module', 'votesmart_webform');
  drupal_add_css($path . '/votesmart_webform.css', 'module');
  drupal_add_js($path . '/votesmart_webform.js', 'module');
}

/**
 * Implementation of hook_webform_component_info().
 */
function votesmart_webform_webform_component_info() {
  //component was originally called votesmart_webform,
  //but it was too long? m got chopped off.
  return array('votesmart' => array(
    'type' => 'email',
    'label' => t('Vote Smart Lookup'),
    'description' => t('Looks up Representative for Given Zip Code'),
    'features' => array(
      'csv' => TRUE, // Add content to CSV downloads.
      'email' => FALSE,// Show this field in e-mailed submissions.
      'email_address' => TRUE, // Allow this field to be used as an e-mail FROM or TO address.
      'email_name' => FALSE,// Allow this field to be used as an e-mail SUBJECT or FROM name.
      'required' => TRUE,// This field may be toggled as required or not.
    ),
    'file' => 'votesmart_webform.webform.inc'
  ));
}

/**
 * Implementation of hook_admin_settings().
 */
function votesmart_webform_admin_settings() {
  $form = array();
  $form['api'] = array(
    '#type' => 'fieldset',
    '#title' => ('API Settings')
  );
  $form['api']['votesmart_host'] = array(
    '#type' => 'textfield',
    '#title' => t('Votesmart API server'),
    '#description' => t(''),
    '#default_value' => variable_get('votesmart_host', 'http://api.votesmart.org/'),
  );
  $form['api']['votesmart_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Votesmart API key'),
    '#description' => '<a href="http://www.votesmart.org/user_register.php">' . t('Register for Key') . '</a>',
    '#default_value' => variable_get('votesmart_key', ''),
  );

  return system_settings_form($form);
}

/**
 * Same Request function used by votesmart module
 */
function _votesmart_webform_api($request, $args = array(), $item = NULL) {
  $key = variable_get('votesmart_key', '');
  $url = variable_get('votesmart_host', 'http://api.votesmart.org/');

  // Convert arguments into a request string.
  $args = array_merge($args, array('key' => $key));
  $url .= $request . '?';
  foreach ($args as $k => $v) {
    $url .= check_plain($k) . '=' . check_plain($v) . '&';
  }

  // Contact the REST API.
  $res = drupal_http_request($url);
  try {
    $ret = (array) new SimpleXMLElement($res->data, LIBXML_NOCDATA);
  }
  catch (Exception $e) {
    drupal_set_message(t('Vote Smart Webform: Attempted to fetch %url -- SimpleXML error parsing %data',array('%url' => $url, '%data' => $res->data)),'error');
    return FALSE;
  }
  /*
  if (isset($ret['errorMessage'])) {
    drupal_set_message(t('Vote Smart API error: %err', array('%err' => $ret['errorMessage'])), 'error');
  }*/

  // Return specified element (e.g. 'details', 'list', etc.);
  if ($item) {
    foreach (explode('.', $item) as $key) {
      $ret = (array) $ret[$key];
    }
  }

  // Nothing specified, return the entire object.
  return $ret;
}

function votesmart_webform_is_us_state($state_abbr) {
  include('votesmart_webform.defines.php');
  return isset($VOTESMART_WEBFORM_US_STATES[$state_abbr]);
}

//office types and ids are the same,
//keeping language the same as votesmart api
function votesmart_webform_is_office_type($officeType) {
  include('votesmart_webform.defines.php');
  return isset($VOTESMART_WEBFORM_OFFICE_TYPES[$officeType]);
}


function votesmart_webform_is_zip($zip) {
  return preg_match('/^[0-9]{5}([- ]?[0-9]{4})?$/', $zip);
}



function votesmart_webform_get_candidate($candidateId, $partial_candidate_xml = NULL, $full = TRUE) {
  $candidateId .= '';//convert to string

  static $candidates;//cache candidates
  
  if ( !isset($candidates) ) {
    $candidates = array();
  }

  if ( !isset($candidates[$candidateId]) ) {
    $c = array();//candidate array

    //only hit the database if we need more than the name
    //or haven't been provided any info
    if ( $full || empty($partial_candidate_xml)) {
      $candidate_data = cache_get('votesmart_webform-candidate-' . $candidateId);
      $c = $candidate_data->data;
    }

    if ( !$candidate_data ) {
      //not scoped so we have opportunity to fix candidate name
      //if it is missing from partial $partial_candidate_xml

      if ( $full ) {
        $c_xml_web = _votesmart_webform_api('Address.getOfficeWebAddress', array('candidateId' => $candidateId));
        $c_xml_addr = _votesmart_webform_api('Address.getOffice', array('candidateId' => $candidateId), 'office');
      }

      //officials can have multiple offices listed,
      //we are only saving the first one
      if ( isset($c_xml_addr[0]->address) ) {
        foreach ($c_xml_addr[0]->address as $k => $v) {
          $v = trim($v);
          if ( !empty($v) ) {
            $c['address'][$k] = $v;
          }
        }
      }

      $vars_to_save = array(
        'title',
        'firstName',
        'middleName',
        'lastName',
        'suffix',
        'nickName',
        'officeTypeId',
        'officeName'
      );

      foreach ($vars_to_save as $var) {
        if ( !empty($c_xml_web['candidate']->$var) ) {
          $c[$var] = $c_xml_web['candidate']->$var . '';
        }
        elseif ( !empty($partial_candidate_xml->$var) ) {
          $c[$var] = $partial_candidate_xml->$var . '';
        }
      }

      if ( is_array($c_xml_web['address']) ) {
        foreach ($c_xml_web['address'] as $addr) {
          $c[$addr->webAddressType . ''] = $addr->webAddress . '';
        }
      }

      if ( empty($c) ) {
        return FALSE;
      }

      if ( $full ) {
        cache_set('votesmart_webform-candidate-' . $candidateId, $c, 'cache', CACHE_TEMPORARY);
      }
    }

    $candidates[$candidateId] = $c;
  }

  return $candidates[$candidateId];
}

function votesmart_webform_get_candidates($args) {
  $args['zip'] = preg_replace('@[^\d]@', '', $args['zip']);//strip non digits

  $zip = $args['zip'];
  $state = $args['state'];
  $officeTypes = $args['officeTypes'];
  if ( is_array($officeTypes) ) {
    foreach ($officeTypes as $k => $office_type ) {
      if ( !votesmart_webform_is_office_type($office_type) ) {
        unset($officeTypes[$k]);
      }
    }
  }

  $full = $args['full'];

  unset($args['full']);

  $query_key = 'votesmart_webform-'.serialize($args);

  $cached_query = cache_get($query_key);
  if ( $cached_query ) {
    return $cached_query->data;
  }

  $args = array();//set this to empty array as it is used later

  if ( votesmart_webform_is_zip($zip) ) {
    $args = array('zip5' => substr($zip, 0, 5) );
    if ( strlen($zip) == 9 )
      $args['zip4'] = substr($zip,5,9);
  
    $candidates = _votesmart_webform_api('Officials.getByZip',$args,'candidate');
  }
  elseif ( votesmart_webform_is_us_state($state) ) {
    $args = array('stateId' => $state );
    $candidates = _votesmart_webform_api('Officials.getStatewide',$args,'candidate');
  }
  else return array();

  $sanitized_candidates = array();
  
  if ( is_array($candidates) ) {
    $do_office_check = !empty($officeTypes) && is_array($officeTypes);
    foreach ($candidates as $c) {
      $candidate = votesmart_webform_get_candidate($c->candidateId, $c, $full);
      if ( empty($candidate) || ( $do_office_check && !in_array($candidate['officeTypeId'], $officeTypes) ) ) {
        continue;
      }
      $sanitized_candidates[$c->candidateId . ''] = $candidate;
    }
    cache_set($query_key, $sanitized_candidates, 'cache', CACHE_TEMPORARY);
 }

  return $sanitized_candidates;
}

